{"ast":null,"code":"// Google Calendar API configuration\nconst CLIENT_ID = 'YOUR_GOOGLE_CLIENT_ID'; // Replace with your actual Google Client ID\nconst API_KEY = 'YOUR_GOOGLE_API_KEY'; // Replace with your actual Google API Key\nconst DISCOVERY_DOC = 'https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest';\nconst SCOPES = 'https://www.googleapis.com/auth/calendar.readonly https://www.googleapis.com/auth/calendar.events';\nclass GoogleCalendarService {\n  constructor() {\n    this.tokenClient = null;\n    this.gapiInited = false;\n    this.gisInited = false;\n    this.accessToken = null;\n  }\n  async initialize() {\n    try {\n      // Load the Google API client library\n      await this.loadGapi();\n      await this.loadGis();\n      return true;\n    } catch (error) {\n      console.error('Failed to initialize Google Calendar:', error);\n      return false;\n    }\n  }\n  async loadGapi() {\n    return new Promise((resolve, reject) => {\n      if (window.gapi) {\n        this.gapiInited = true;\n        resolve();\n        return;\n      }\n      const script = document.createElement('script');\n      script.src = 'https://apis.google.com/js/api.js';\n      script.onload = () => {\n        window.gapi.load('client', async () => {\n          try {\n            await window.gapi.client.init({\n              apiKey: API_KEY,\n              discoveryDocs: [DISCOVERY_DOC]\n            });\n            this.gapiInited = true;\n            resolve();\n          } catch (error) {\n            reject(error);\n          }\n        });\n      };\n      script.onerror = reject;\n      document.head.appendChild(script);\n    });\n  }\n  async loadGis() {\n    return new Promise((resolve, reject) => {\n      if (window.google) {\n        this.gisInited = true;\n        resolve();\n        return;\n      }\n      const script = document.createElement('script');\n      script.src = 'https://accounts.google.com/gsi/client';\n      script.onload = () => {\n        this.tokenClient = window.google.accounts.oauth2.initTokenClient({\n          client_id: CLIENT_ID,\n          scope: SCOPES,\n          callback: tokenResponse => {\n            this.accessToken = tokenResponse.access_token;\n            this.onTokenReceived();\n          }\n        });\n        this.gisInited = true;\n        resolve();\n      };\n      script.onerror = reject;\n      document.head.appendChild(script);\n    });\n  }\n  onTokenReceived() {\n    // Store the token in localStorage for persistence\n    localStorage.setItem('google_calendar_token', this.accessToken);\n    // Trigger any callbacks that were waiting for authentication\n    if (this.onAuthSuccess) {\n      this.onAuthSuccess(this.accessToken);\n    }\n  }\n  async authenticate() {\n    if (!this.gapiInited || !this.gisInited) {\n      throw new Error('Google APIs not initialized');\n    }\n\n    // Check if we already have a valid token\n    const storedToken = localStorage.getItem('google_calendar_token');\n    if (storedToken) {\n      this.accessToken = storedToken;\n      return storedToken;\n    }\n\n    // Request new token\n    return new Promise((resolve, reject) => {\n      this.onAuthSuccess = resolve;\n      this.tokenClient.requestAccessToken();\n    });\n  }\n  async getCalendars() {\n    if (!this.accessToken) {\n      throw new Error('Not authenticated');\n    }\n    try {\n      const response = await window.gapi.client.calendar.calendarList.list();\n      return response.result.items.map(calendar => ({\n        id: calendar.id,\n        name: calendar.summary,\n        color: calendar.backgroundColor,\n        primary: calendar.primary || false\n      }));\n    } catch (error) {\n      console.error('Error fetching calendars:', error);\n      throw error;\n    }\n  }\n  async getEvents(calendarId, timeMin, timeMax) {\n    if (!this.accessToken) {\n      throw new Error('Not authenticated');\n    }\n    try {\n      const response = await window.gapi.client.calendar.events.list({\n        calendarId: calendarId,\n        timeMin: timeMin.toISOString(),\n        timeMax: timeMax.toISOString(),\n        singleEvents: true,\n        orderBy: 'startTime'\n      });\n      return response.result.items.map(event => ({\n        id: event.id,\n        title: event.summary,\n        start: event.start.dateTime || event.start.date,\n        end: event.end.dateTime || event.end.date,\n        calendar: calendarId,\n        description: event.description,\n        location: event.location\n      }));\n    } catch (error) {\n      console.error('Error fetching events:', error);\n      throw error;\n    }\n  }\n  async createEvent(calendarId, event) {\n    if (!this.accessToken) {\n      throw new Error('Not authenticated');\n    }\n    try {\n      const response = await window.gapi.client.calendar.events.insert({\n        calendarId: calendarId,\n        resource: {\n          summary: event.title,\n          description: event.description,\n          start: {\n            dateTime: event.start,\n            timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone\n          },\n          end: {\n            dateTime: event.end,\n            timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone\n          },\n          attendees: event.attendees ? event.attendees.map(email => ({\n            email\n          })) : []\n        }\n      });\n      return response.result;\n    } catch (error) {\n      console.error('Error creating event:', error);\n      throw error;\n    }\n  }\n  async deleteEvent(calendarId, eventId) {\n    if (!this.accessToken) {\n      throw new Error('Not authenticated');\n    }\n    try {\n      await window.gapi.client.calendar.events.delete({\n        calendarId: calendarId,\n        eventId: eventId\n      });\n    } catch (error) {\n      console.error('Error deleting event:', error);\n      throw error;\n    }\n  }\n  logout() {\n    this.accessToken = null;\n    localStorage.removeItem('google_calendar_token');\n    if (window.google && window.google.accounts.oauth2) {\n      window.google.accounts.oauth2.revoke(this.accessToken);\n    }\n  }\n  isAuthenticated() {\n    return !!this.accessToken;\n  }\n}\n\n// Create a singleton instance\nconst googleCalendarService = new GoogleCalendarService();\nexport default googleCalendarService;","map":{"version":3,"names":["CLIENT_ID","API_KEY","DISCOVERY_DOC","SCOPES","GoogleCalendarService","constructor","tokenClient","gapiInited","gisInited","accessToken","initialize","loadGapi","loadGis","error","console","Promise","resolve","reject","window","gapi","script","document","createElement","src","onload","load","client","init","apiKey","discoveryDocs","onerror","head","appendChild","google","accounts","oauth2","initTokenClient","client_id","scope","callback","tokenResponse","access_token","onTokenReceived","localStorage","setItem","onAuthSuccess","authenticate","Error","storedToken","getItem","requestAccessToken","getCalendars","response","calendar","calendarList","list","result","items","map","id","name","summary","color","backgroundColor","primary","getEvents","calendarId","timeMin","timeMax","events","toISOString","singleEvents","orderBy","event","title","start","dateTime","date","end","description","location","createEvent","insert","resource","timeZone","Intl","DateTimeFormat","resolvedOptions","attendees","email","deleteEvent","eventId","delete","logout","removeItem","revoke","isAuthenticated","googleCalendarService"],"sources":["/Users/alvinhartono/Documents/GitHub/ZackFairSldrFrst.github.io/smart-calendar/src/services/googleCalendar.js"],"sourcesContent":["// Google Calendar API configuration\nconst CLIENT_ID = 'YOUR_GOOGLE_CLIENT_ID'; // Replace with your actual Google Client ID\nconst API_KEY = 'YOUR_GOOGLE_API_KEY'; // Replace with your actual Google API Key\nconst DISCOVERY_DOC = 'https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest';\nconst SCOPES = 'https://www.googleapis.com/auth/calendar.readonly https://www.googleapis.com/auth/calendar.events';\n\nclass GoogleCalendarService {\n  constructor() {\n    this.tokenClient = null;\n    this.gapiInited = false;\n    this.gisInited = false;\n    this.accessToken = null;\n  }\n\n  async initialize() {\n    try {\n      // Load the Google API client library\n      await this.loadGapi();\n      await this.loadGis();\n      return true;\n    } catch (error) {\n      console.error('Failed to initialize Google Calendar:', error);\n      return false;\n    }\n  }\n\n  async loadGapi() {\n    return new Promise((resolve, reject) => {\n      if (window.gapi) {\n        this.gapiInited = true;\n        resolve();\n        return;\n      }\n\n      const script = document.createElement('script');\n      script.src = 'https://apis.google.com/js/api.js';\n      script.onload = () => {\n        window.gapi.load('client', async () => {\n          try {\n            await window.gapi.client.init({\n              apiKey: API_KEY,\n              discoveryDocs: [DISCOVERY_DOC],\n            });\n            this.gapiInited = true;\n            resolve();\n          } catch (error) {\n            reject(error);\n          }\n        });\n      };\n      script.onerror = reject;\n      document.head.appendChild(script);\n    });\n  }\n\n  async loadGis() {\n    return new Promise((resolve, reject) => {\n      if (window.google) {\n        this.gisInited = true;\n        resolve();\n        return;\n      }\n\n      const script = document.createElement('script');\n      script.src = 'https://accounts.google.com/gsi/client';\n      script.onload = () => {\n        this.tokenClient = window.google.accounts.oauth2.initTokenClient({\n          client_id: CLIENT_ID,\n          scope: SCOPES,\n          callback: (tokenResponse) => {\n            this.accessToken = tokenResponse.access_token;\n            this.onTokenReceived();\n          },\n        });\n        this.gisInited = true;\n        resolve();\n      };\n      script.onerror = reject;\n      document.head.appendChild(script);\n    });\n  }\n\n  onTokenReceived() {\n    // Store the token in localStorage for persistence\n    localStorage.setItem('google_calendar_token', this.accessToken);\n    // Trigger any callbacks that were waiting for authentication\n    if (this.onAuthSuccess) {\n      this.onAuthSuccess(this.accessToken);\n    }\n  }\n\n  async authenticate() {\n    if (!this.gapiInited || !this.gisInited) {\n      throw new Error('Google APIs not initialized');\n    }\n\n    // Check if we already have a valid token\n    const storedToken = localStorage.getItem('google_calendar_token');\n    if (storedToken) {\n      this.accessToken = storedToken;\n      return storedToken;\n    }\n\n    // Request new token\n    return new Promise((resolve, reject) => {\n      this.onAuthSuccess = resolve;\n      this.tokenClient.requestAccessToken();\n    });\n  }\n\n  async getCalendars() {\n    if (!this.accessToken) {\n      throw new Error('Not authenticated');\n    }\n\n    try {\n      const response = await window.gapi.client.calendar.calendarList.list();\n      return response.result.items.map(calendar => ({\n        id: calendar.id,\n        name: calendar.summary,\n        color: calendar.backgroundColor,\n        primary: calendar.primary || false\n      }));\n    } catch (error) {\n      console.error('Error fetching calendars:', error);\n      throw error;\n    }\n  }\n\n  async getEvents(calendarId, timeMin, timeMax) {\n    if (!this.accessToken) {\n      throw new Error('Not authenticated');\n    }\n\n    try {\n      const response = await window.gapi.client.calendar.events.list({\n        calendarId: calendarId,\n        timeMin: timeMin.toISOString(),\n        timeMax: timeMax.toISOString(),\n        singleEvents: true,\n        orderBy: 'startTime'\n      });\n\n      return response.result.items.map(event => ({\n        id: event.id,\n        title: event.summary,\n        start: event.start.dateTime || event.start.date,\n        end: event.end.dateTime || event.end.date,\n        calendar: calendarId,\n        description: event.description,\n        location: event.location\n      }));\n    } catch (error) {\n      console.error('Error fetching events:', error);\n      throw error;\n    }\n  }\n\n  async createEvent(calendarId, event) {\n    if (!this.accessToken) {\n      throw new Error('Not authenticated');\n    }\n\n    try {\n      const response = await window.gapi.client.calendar.events.insert({\n        calendarId: calendarId,\n        resource: {\n          summary: event.title,\n          description: event.description,\n          start: {\n            dateTime: event.start,\n            timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone\n          },\n          end: {\n            dateTime: event.end,\n            timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone\n          },\n          attendees: event.attendees ? event.attendees.map(email => ({ email })) : []\n        }\n      });\n\n      return response.result;\n    } catch (error) {\n      console.error('Error creating event:', error);\n      throw error;\n    }\n  }\n\n  async deleteEvent(calendarId, eventId) {\n    if (!this.accessToken) {\n      throw new Error('Not authenticated');\n    }\n\n    try {\n      await window.gapi.client.calendar.events.delete({\n        calendarId: calendarId,\n        eventId: eventId\n      });\n    } catch (error) {\n      console.error('Error deleting event:', error);\n      throw error;\n    }\n  }\n\n  logout() {\n    this.accessToken = null;\n    localStorage.removeItem('google_calendar_token');\n    if (window.google && window.google.accounts.oauth2) {\n      window.google.accounts.oauth2.revoke(this.accessToken);\n    }\n  }\n\n  isAuthenticated() {\n    return !!this.accessToken;\n  }\n}\n\n// Create a singleton instance\nconst googleCalendarService = new GoogleCalendarService();\nexport default googleCalendarService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}